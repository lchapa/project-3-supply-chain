// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

const weis = 1000;
const priceMultiple = 5



contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("OnlyFarmer can Harvest item - Testint AccessControl for One Role.", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let farmerAdded = false
        try {
            // Mark an item as Harvested by calling function harvestItem()
            let result = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})
            assert(result, 'No result returned at Harvesting Item.')
            result.logs.forEach(l => {
                if(l.event === 'Harvested'){                        
                    farmerAdded = true     
                }
            })
        } catch(e) {
            assert.isOk('Error Farmer has not been added to Farmers List: ' + e);
            assert(!farmerAdded, 'Farmer is not in Farmers List')
        }

    })

    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //Add originFarmerID to Farmers List before Harvest.        
        try {
            let result = await supplyChain.addFarmer(originFarmerID)
            assert(result, 'No result returned at Harvesting Item.')
            let farmerAdded = false
            result.logs.forEach(l => {
                if(l.event === 'FarmerAdded'){                        
                    farmerAdded = true     
                }
            })
            assert(farmerAdded, 'Farmer has not been added')            
        } catch(e) {
            assert.isNotOk('No error should have been launched at Adding farmer to list: ' + e);
        }    

        // Declare and Initialize a variable for event
        var harvestedEmitted = false

        try{
            // Mark an item as Harvested by calling function harvestItem()
            let result = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})
            assert(result, 'No result returned at Harvesting Item.')
            result.logs.forEach(l => {
                if(l.event === 'Harvested'){                        
                    harvestedEmitted = true     
                }
            })
        } catch(e) {
            assert.isNotOk('No error should have been launched at Harvesting Item: ' + e);
        }

        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(harvestedEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var processedEmitted = false
        
        try {
            // Mark an item as Processed by calling function processtItem()
            let result = await supplyChain.processItem(upc, {from: originFarmerID})
            assert(result, 'No result returned at Processing Item.')
            result.logs.forEach(l => {
                
                // Watch the emitted event Processed()
                if(l.event === 'Processed'){                        
                    processedEmitted = true     
                }
            })
        } catch(e) {
            assert.isNotOk('No error should have been launched at Processing Item: ' + e);            
        }

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(processedEmitted, true, 'Invalid event emitted') 
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let packedEmitted = false
        
        try {
            // Mark an item as Processed by calling function processtItem()
            let result = await supplyChain.packItem(upc, {from: originFarmerID})
            assert(result, 'No result returned at Packing Item.')
            result.logs.forEach(l => {
                
                // Watch the emitted event Processed()
                if(l.event === 'Packed'){                        
                    packedEmitted = true     
                }
            })
        } catch(e) {
            assert.isNotOk('No error should have been launched at Processing Item: ' + e);      
        }

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(packedEmitted, true, 'Invalid event emitted') 
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let forSaleEmitted = false

        let price = web3.utils.toBN(weis * priceMultiple)
        
        try {
            // Mark an item as Processed by calling function processtItem()
            let result = await supplyChain.sellItem(upc, price, {from: originFarmerID})
            assert(result, 'No result returned at Selling Item.')
            result.logs.forEach(l => {
                
                // Watch the emitted event Processed()
                if(l.event === 'ForSale'){                        
                    forSaleEmitted = true     
                }
            })
        } catch(e) {
            assert.isNotOk('No error should have been launched at Processing Item: ' + e);            
        }

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert(resultBufferTwo[4].eq(price), 'Error: Invalid item Price')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(forSaleEmitted, true, 'Invalid event emitted') 
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        try {
            let distributorAdded = false
            let result = await supplyChain.addDistributor(distributorID)
            assert(result, 'No result returned at Adding Distributor to List.')
            result.logs.forEach(l => {
                if(l.event === 'DistributorAdded'){                        
                    distributorAdded = true     
                }
            })
            assert(distributorAdded, "Distributor has not been added to Distributors list")
        } catch(e) {
            assert.isNotOk("No error should have been lanched at Addisg Distributor to list:" + e);            
        }
        
        // Declare and Initialize a variable for event
        let soldEmitted = false
        let farmerBalance = new web3.utils.BN(await web3.eth.getBalance(originFarmerID))

        // Mark an item as Sold by calling function buyItem()
        try {
            let result = await supplyChain.buyItem(upc, {from: distributorID, value : weis * 10})
            assert(result, 'No result returned at Buying Item.')
            result.logs.forEach(l => {
                
                // Watch the emitted event Processed()
                if(l.event === 'Sold'){                        
                    soldEmitted = true     
                }
            })
        } catch(e) {
            assert.isNotOk("No error should have been lanched at Buying Item:" + e);
        }        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let farmerBalanceAfterItemSold = new web3.utils.BN(await web3.eth.getBalance(originFarmerID))     
        let farmerBalanceExpected = farmerBalance.add(new web3.utils.BN(weis * priceMultiple))

        // Verify the result set
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(soldEmitted, true, 'Invalid event emitted')   
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')             
        assert(farmerBalanceAfterItemSold.eq(farmerBalanceExpected), "Farmer Balance is incorrect after selling item") 
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let shippedEmmited = false
        
        // Mark an item as Sold by calling function buyItem()
        try {
            let result = await supplyChain.shipItem(upc, {from: distributorID})
            assert(result, 'No result returned at Shipping Item.')
            result.logs.forEach(l => {
                // Watch the emitted event Processed()
                if(l.event === 'Shipped'){                        
                    shippedEmmited = true     
                }    
            })
        } catch(e) {
            assert.isNotOk("No error should have been lanched at Shipping Item:" + e);
        }
                
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')             
        assert.equal(shippedEmmited, true, 'Invalid event emitted')        
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        try {
            let retailerAdded = false
            let result = await supplyChain.addRetailer(retailerID)
            assert(result, 'No result returned at Adding RetailerAdded to List.')
            result.logs.forEach(l => {
                if(l.event === 'RetailerAdded'){                        
                    retailerAdded = true     
                }
            })
            assert(retailerAdded, "Retailer has not been added to Retailers list")
        } catch(e) {
            assert.isNotOk("No error should have been lanched at Adding Retailer to list:" + e);            
        }

        // Declare and Initialize a variable for event
        let receivedEmmited = false
        
        // Mark an item as Received by calling function receiveItem()
        try {
            let result = await supplyChain.receiveItem(upc, {from: retailerID})
            assert(result, 'No result returned at Receiving Item.')
            result.logs.forEach(l => {
                // Watch the emitted event Received()
                if(l.event === 'Received'){                        
                    receivedEmmited = true     
                }    
            })
        } catch(e) {
            assert.isNotOk("No error should have been lanched at Receiving Item:" + e);
        }

                
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')             
        assert.equal(receivedEmmited, true, 'Invalid event emitted')     
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        try {
            let consumerAdded = false
            let result = await supplyChain.addConsumer(consumerID)
            assert(result, 'No result returned at Adding ConsumerAdded to List.')
            result.logs.forEach(l => {
                if(l.event === 'ConsumerAdded'){                        
                    consumerAdded = true     
                }
            })
            assert(consumerAdded, "Conumer has not been added to Consumers list")
        } catch(e) {
            assert.isNotOk("No error should have been lanched at Adding Consumer to list:" + e);            
        }

        // Declare and Initialize a variable for event
        let purchasedEmmited = false
        
        // Mark an item as Puerchased by calling function purchaseItem()
        try {
            let result = await supplyChain.purchaseItem(upc, {from: consumerID})
            assert(result, 'No result returned at Purchasing Item.')
            result.logs.forEach(l => {
                // Watch the emitted event Purchased()
                if(l.event === 'Purchased'){                        
                    purchasedEmmited = true     
                }    
            })
        } catch(e) {
            assert.isNotOk("No error should have been lanched at Purchasing Item:" + e);
        }
                
        // Retrieve the just now saved item from blockchain by calling function PurchaseItem()
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')             
        assert.equal(purchasedEmmited, true, 'Invalid event emitted')     
        
    })    

    // 9th Test AND 10th Test MERGED into this one
    it("Testing smart contract function fetchItemBufferOne() AND fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        let resultBufferOne
        let resultBufferTwo

        try{
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        }
        catch(e){
            assert.isNotOk('No error should have been launched at Fetching Item: ' + e);
        }

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid Distributor')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid Retailer')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid Consumer')             
    })

    //10th Test
    //it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
    //})

    // 10th Test Ownable feature of the entire Blockchian for the Coffee Brand.
    it("Testing smart contract Ownable feature for managing the Owner of the BlockChain", async() => {
        const supplyChain = await SupplyChain.deployed()

        //Asser current blockchain owner account against ownerId
        let blockchainOwner = await supplyChain.owner()
        assert.equal(blockchainOwner, ownerID, "Current Owner Account is not the same as the one it was created with.")

        let newOwner = accounts[9]

        //transferOwnership
        let result = await supplyChain.transferOwnership(newOwner, {from : ownerID})
        result.logs.forEach(l => {
            if(l.event === "TransferOwnership") {
                assert.equal(l.args.oldOwner, ownerID, "Incorrect OLD owner")
                assert.equal(l.args.newOwner, newOwner, "Incorrect NEW Owner")                
            }
        })

        result = await supplyChain.renounceOwnership({from: newOwner})
        result.logs.forEach(l => {
            if(l.event === "TransferOwnership") {
                assert.equal(l.args.oldOwner, newOwner, "Incorrect OLD owner")
                assert.equal(l.args.newOwner, 0, "Incorrect NEW Owner")                
            }
        })
        let isStillOwner = await supplyChain.isOwner({from: newOwner})
        assert.isFalse(isStillOwner, "OrigOwner is not Coffee Blockchain owner anymore")
    })

});

